#!/usr/bin/env bash

set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
now=`date +"%m_%d_%Y"`

BIN=/usr/bin

setup_tests() {
    echo "--------------------------------------------"
    echo "Installing Python Test Harness..."
    if ! $(python -c "import nose" &> /dev/null); then
        sudo pip install nose
    fi

    if ! $(python -c "import coverage" &> /dev/null); then
        sudo pip install coverage
    fi
    
    echo "Installing PHP Test Harness..."
    if [ ! -f "/usr/local/bin/phpunit" ]; then
        cd /tmp
        wget http://pear.phpunit.de/get/phpunit.phar
        sudo chmod +x phpunit.phar
        sudo mv phpunit.phar /usr/local/bin/phpunit
    fi

    echo "Installing JavaScript Test Harness..."
    cd /tmp
    
    # Install git
    if [ ! -f "/usr/bin/git" ]; then
        sudo apt-get install -y git-core
    fi
    
    # Install and link phantomjs
    if [ ! -f "phantomjs-1.9.1-linux-x86_64.tar.bz2" ]; then
        wget https://phantomjs.googlecode.com/files/phantomjs-1.9.1-linux-x86_64.tar.bz2
        tar xvjf phantomjs-1.9.1-linux-x86_64.tar.bz2
        cd phantomjs-1.9.1-linux-x86_64
        sudo ln -sf `pwd`/bin/phantomjs /usr/local/bin/phantomjs
        cd ../
    fi
    
    # Install and link casperjs
    if [ ! -d "casperjs" ]; then
        git clone git://github.com/n1k0/casperjs.git
        cd casperjs
        sudo ln -sf `pwd`/bin/casperjs /usr/local/bin/casperjs
        cd ../
    fi

    cd /var/www

    echo "--------------------------------------------"
}

run_all_tests() {
    client_tests
    python_tests
    php_tests
}

function test_clean() {
    echo "Cleaning up Test Environment"
    if [ -f "/tmp/phantomjs-1.9.1-linux-x86_64.tar.bz2" ]; then
        sudo rm -r /tmp/phantomjs*
    fi
    if [ -d "/tmp/casperjs" ]; then
        sudo rm -r /tmp/casperjs
    fi
    if [ -f "/usr/local/bin/phantomjs" ]; then
        sudo rm /usr/local/bin/phantomjs
    fi
    if [ -f "/usr/local/bin/casperjs" ]; then
        sudo rm /usr/local/bin/casperjs
    fi
    echo "Test Environment Clean"
}

function python_tests() {

    echo "------------------------------------------------------------"
    echo "                      Python Tests"
    echo "------------------------------------------------------------"
    echo

    cd /var/www/flaskapps/etl/ETL
    nosetests -v --exe --with-xunit --xunit-file=/var/www/logs/python_log_$now.xml --cover-xml --cover-xml-file=/var/www/logs/python_coverage_$now.xml
    cd /var/www

    echo
}

function client_tests() {
    echo
    echo "------------------------------------------------------------"
    echo "                      Twine Client Tests"
    echo "------------------------------------------------------------"
    echo
    casperjs test /var/www/siv-v3/app/tests/ --xunit=js_log_$now.xml
    echo
}

function php_tests() {
    echo "------------------------------------------------------------"
    echo "                      PHP Tests"
    echo "------------------------------------------------------------"
    echo
    phpunit --verbose --log-json /var/www/logs/php_tests_$now.json /var/www/siv-v3/api/tests/
    echo
}

function load_mongo() {
    echo "------------------------------------------------------------"
    echo "Searching for Mongo dumps (*.bson)"
    echo "(note: please ensure all bson files have their collection as their name, i.e. his.bson, de_urban.bson"
    cd /var/www/vagrant/src/mongo
    for f in *.bson; do
        echo "Processing $f..."
        COLLECTION=`basename $f .bson`
        mongo siv --eval "db.${COLLECTION}.drop()"
        mongorestore -d siv -c ${COLLECTION} /var/www/vagrant/src/mongo/${f}
        echo "Finished processing $f."
        echo
    done

    echo "Done loading mongo collections."
    echo "------------------------------------------------------------"
}

run_build(){
    echo "------------------------------------------------------------"
    echo "                    Warning"
    echo "------------------------------------------------------------"

    echo "Building the Twine client libraries may take some time on
systems with a low amount of resources and depending on the
machines configuration. It is recommended that you use one
of the pre-built deploy backages instead of attempting to 
build the application, unless you are creating a new 
release package."

    echo

    echo "Do you want to continue (y/n)"
    read continue
    if [[ "$continue" != "y" ]]; then
        exit 1
    fi
    echo

    echo "Starting build"
}

if [ "$1" ]; then
    case $1 in
        "--check-deps")
            shift
            echo "Checking Dependencies"
            cd vagrant
            pip freeze > /var/www/logs/pip_req.txt
            shift;;
        "--help")
            echo "Usage: $0 [command] [--options]"
            echo
            echo "--check-deps          Check that all dependencies are installed."
            echo "--clean               Clean up build artifacts"
            echo "--test                Run tests"
            echo "--test-clean          Clean up test requirements"
            echo "--build               Build and package the application for deployment."
            echo
            exit 0
            ;;
        "--build")
            run_build
            if [ "$2" ]; then
                echo $2
            fi
            shift;;
        "--test")
            setup_tests
            if [ $2 ]; then
                case $2 in
                    "--python")
                        python_tests
                        shift;;
                    "--php")
                        php_tests
                        shift;;
                    "--js")
                        client_tests
                        shift;;
                    "--none")
                        exit 1;;
                    *)
                        echo "Unrecognized option passed to --test (--python, --php, --js are options)"
                        exit 1;;
                esac
            else
                run_all_tests
            fi
            echo
            echo "Test output is available here: /var/www/logs/"
            shift;;
        "--test-clean")
            test_clean
            shift;;
        "--load-mongo")
            load_mongo
            shift;;
        "--clean")
            rm -r /var/www/logs/*.log
            rm -r /var/www/logs/*.xml
            rm -r /var/www/logs/*.json
            shift;;
        *)
            echo "Unrecognized option: $1"
            exit 1;;
    esac
fi




